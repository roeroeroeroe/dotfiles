#!/usr/bin/env bash

USAGE="Usage: $(basename "$0") <user>"

[ -z "$1" ] && {
	echo "$USAGE"
	exit 2
}
[ "$1" = "-h" ] && {
	echo "$USAGE"
	exit 0
}

GQL_URL="https://gql.twitch.tv/gql"
CLIENT_ID="ue6666qo983tsx6so1t0vnawi233wa"
LOGIN="$1"
DMENU_LINES=20

fmt_timediff() {
	[ -z "$1" ] && return 1

	TS_EPOCH=$(date -u -d "$1" +%s) || return 1
	NOW_EPOCH=$(date -u +%s)
	DURATION=$((NOW_EPOCH - TS_EPOCH))

	H=$((DURATION / 3600))
	M=$((DURATION % 3600 / 60))
	S=$((DURATION % 60))

	[ $H -gt 0 ] && printf "%dh " "$H"
	[ $M -gt 0 ] && printf "%dm " "$M"
	printf "%ds\n" "$S"
}

play() {
	[ -z "$1" ] && return 1
	# xdg-open "https://player.twitch.tv/?channel=$1&parent=twitch.tv" &
	streamlink \
		--twitch-low-latency \
		--hls-live-edge 1 \
		--stream-segment-threads 10 \
		--stream-timeout 20 \
		--player mpv \
		"twitch.tv/$1" best &
}

gql() {
	[ -z "$1" ] && return 1

	RES=$(curl -m 5 -sX POST -w "\n%{http_code}" "$GQL_URL" \
		-H "Content-Type: application/json" \
		-H "Client-ID: $CLIENT_ID" \
		-d "$(jq -n --arg query "$1" '{query: $query}')")

	STATUS=$(echo "$RES" | tail -n 1); [ "$STATUS" -ne 200 ] && {
		echo "status code $STATUS"
		return 1
	}

	BODY=$(echo "$RES" | head -n -1)
	ERR=$(jq -r '.errors // empty' <<< "$BODY"); [ -n "$ERR" ] && {
		echo "$ERR"
		return 1
	}

	echo "$BODY"
	return 0
}

get_live_followed_channels() {
	LIMIT=1000
	FETCHED=0
	CURSOR=""
	while [ $FETCHED -lt $LIMIT ]; do
		RES=$(gql "query follows {
  user(login: \"$LOGIN\") {
    follows(first: 100 after: \"$CURSOR\") {
      pageInfo { hasNextPage }
      edges {
        cursor
        node {
          login
          stream {
            title
            createdAt
            viewersCount
            height
            width
            averageFPS
            game { displayName }
          }
        }
      }
    }
  }
}"		)
		if [[ $? -ne 0 || -z "$RES" ]]; then
			if [ -n "$RES" ]; then
				echo "gql request failed: $RES"
			else
				echo "gql request failed"
			fi
			return 1;
		fi
		jq -e '.data.user? // empty' <<< "$RES" > /dev/null || {
			echo "user $LOGIN does not exist"
			return 1
		}
		jq -e '.data.user.follows.edges? // empty | length > 0' <<< "$RES" > /dev/null || {
			echo "$LOGIN doesn't follow anyone"
			return 1
		}

		jq -c '.data.user.follows.edges[]' <<< "$RES" | while read -r EDGE; do
			CREATED_AT=$(jq -r '.node.stream.createdAt // empty' <<< "$EDGE")
			[ -z "$CREATED_AT" ] && continue

			LOGIN=$(jq -r '.node.login' <<< "$EDGE")
			CATEGORY=$(jq -r '.node.stream.game.displayName // "N/A"' <<< "$EDGE")
			TITLE=$(jq -r '.node.stream.title // "N/A"' <<< "$EDGE")
			VIEWERS=$(jq -r '.node.stream.viewersCount // "N/A"' <<< "$EDGE")
			WIDTH=$(jq -r '.node.stream.width // empty' <<< "$EDGE")
			HEIGHT=$(jq -r '.node.stream.height // empty' <<< "$EDGE")
			RESOLUTION=$([[ -z "$WIDTH" || -z "$HEIGHT" ]] && echo "N/A" || echo "${WIDTH}x${HEIGHT}")
			FPS=$(jq -r '.node.stream.averageFPS // "N/A"' <<< "$EDGE")

			DURATION=$(fmt_timediff "$CREATED_AT")

			[ "${#CATEGORY}" -gt 20 ] && CATEGORY="${CATEGORY:0:20}..."
			[ "${#TITLE}" -gt 50 ] && TITLE="${TITLE:0:50}..."

			printf "%-15s live for: %-13s viewers: %-6s category: %-23s res: %-9s fps: %-3s title: %s\n" \
				"$LOGIN" "$DURATION" "$VIEWERS" "$CATEGORY" "$RESOLUTION" "$FPS" "$TITLE"
		done

		CURSOR=$(jq -r '.data.user.follows.edges[-1].cursor // empty' <<< "$RES")
		HAS_NEXT_PAGE=$(jq -r '.data.user.follows.pageInfo.hasNextPage' <<< "$RES")

		[[ "$HAS_NEXT_PAGE" != "true" || -z "$CURSOR" ]] && break

		FETCHED=$((FETCHED + 100))
	done
}

LIVE_CHANNELS=$(get_live_followed_channels) || {
	notify-send "$LIVE_CHANNELS" # error
	exit 1
}

[ -z "$LIVE_CHANNELS" ] && {
	notify-send "none of $LOGIN's followed channels are currently live"
	exit 0
}

SORTED_CHANNELS=$(echo "$LIVE_CHANNELS" | awk '
{
	match($0, /viewers: [0-9]+/, v_match)
	v = substr(v_match[0], 9)
	print v "\t" $0
}' | sort -nr | cut -f2-)

CHOICE=$(dmenu -l $DMENU_LINES <<< "$SORTED_CHANNELS")
[ -z "$CHOICE" ] && exit 2

play "$(awk '{print $1}' <<< "$CHOICE")"
